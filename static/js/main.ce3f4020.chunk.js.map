{"version":3,"sources":["Cell.js","Table.js","PuzzleOption.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","katt","parentCallback","index","getCoords","bind","rows","cols","col","Math","floor","row","coords","this","style","position","border","backgroundClip","backgroundRepeat","width","img","height","backgroundPosition","backgroundPos","backgroundImage","src","left","top","fontSize","number","hole","ref","innerRef","onClick","e","React","Component","Table","checkSolved","arr1","arr2","i","length","canMove","destination","state","holePosition","diff","abs","getNewLayout","numbers","fromIndex","toIndex","temp","slice","swap","cellIndex","currentHole","newNumbers","setState","identifiers","solved","shuffle","counter","cellArray","neighbour","offsets","safeArray","randomOffset","random","getBackgroundPos","reRenderWhenSolved","shiftCounter","indexOf","image","Image","lyuk","alt","type","preventDefault","map","key","PuzzleOption","className","click","Tilitoli","start","imageFromPuzzleOptions","gameOn","getSquareImagesFromFlickr","q","axios","get","error","console","setImages","images","ready","log","noOfImages","randomIndices","query","process","push","then","response","randomIndex","data","photos","photo","url_w","catch","resizeImages","pic","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.ce3f4020.chunk.js","sourcesContent":["import React from 'react';\n\nclass Cell extends React.Component {\n    constructor(props) {\n      super(props);\n      this.getCoords = this.getCoords.bind(this);\n    }\n    getCoords(index, rows, cols) {\n        return {\n          col: Math.floor(index/cols),\n          row: index % cols\n        }\n      }\n    // swapping and keeping track of where the blank cell is\n    // with own method that calls parent's method, passing it data\n    katt = () => {\n      this.props.parentCallback(this.props.index);\n    }\n    render() {\n      let coords = this.getCoords(this.props.index, this.props.rows, this.props.cols);\n      let style = {\n        position: 'absolute',\n        border: \"1px solid white\",\n        backgroundClip: \"content-box\",\n        backgroundRepeat: \"no-repeat\",\n        width: this.props.img.width / 4,\n        height: this.props.img.height / 4,\n        backgroundPosition: this.props.backgroundPos,\n        backgroundImage: \"url(\" + this.props.img.src + \")\",\n        left: (this.props.img.width / 4) * coords.row,\n        top: (this.props.img.height / 4) * coords.col,\n        fontSize: \"8px\"\n      };\n      // eslint-disable-next-line\n      var hole = this.props.hole;\n      // eslint-disable-next-line\n      var rows = this.props.rows;\n      // eslint-disable-next-line\n      var cols = this.props.cols;\n      // eslint-disable-next-line\n      var index = this.props.index;\n      var number = this.props.number;\n      return (\n      <div\n        ref={this.props.innerRef}\n        style = { style }\n        onClick = {(e) => this.katt(e)}>\n          {(this.props.hole === number)?\"\":number+1}\n      </div>\n      )\n    }\n  };\n\n  export default Cell;","import React from \"react\";\n//import axios from 'axios';\nimport Cell from \"./Cell.js\";\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n    // you need to duplicate the component scope\n    // to later be able to call a component method\n    // from within the state constructor\n    //const myself = this;\n    this.state = {\n      // the counter for the shuffle\n      shiftCounter: 0,\n      checkSolved: this.checkSolved.bind(this),\n      solved: false,\n      numbers: this.props.numbers,\n      // this is what we'll rely on to track the blank cell around the grid\n      // trouble is, this \"numbers\" isn't \"this.state.numbers\",\n      // which I would need to be able to\n      // scramble cells from within the constructor\n      holePosition: this.props.numbers.indexOf(this.props.hole),\n      // setting up a starting image\n      image: \"https://unsplash.it/400/400\",\n      //image: 'https://source.unsplash.com/random/400x400'\n    };\n  }\n\n  /*\n    // calling the parent to get new image\n    resetImage = () => {\n      this.props.parentCallback();\n    }\n    */\n\n  checkSolved = (arr1, arr2) => {\n    for (let i = arr1.length; i--; ) {\n      if (arr1[i] !== arr2[i]) return false;\n    }\n    return true;\n  };\n\n  getCoords = (index, rows, cols) => {\n    return {\n      col: Math.floor(index / cols),\n      row: index % cols,\n    };\n  };\n\n  // adding a second parameter\n  // and defaulting it to this.state.holePosition\n  // so that canMove could be called\n  // from the new shuffle\n  canMove = (destination, hole = this.state.holePosition) => {\n    if (destination < 0 || destination >= 16) {\n      return false;\n    }\n    let diff = hole - destination;\n    if (diff === -1) {\n      return destination % this.props.rows !== 0;\n    } else if (diff === 1) {\n      return hole % this.props.rows !== 0;\n    } else {\n      return Math.abs(diff) === this.props.rows;\n    }\n  };\n\n  componentDidMount() {\n    this.shuffle();\n  }\n  getNewLayout = (numbers, fromIndex, toIndex) => {\n    numbers = numbers.slice(0);\n    let temp = numbers[toIndex];\n    numbers[toIndex] = numbers[fromIndex];\n    numbers[fromIndex] = temp;\n    return numbers;\n  };\n  // this is still necessary for a single swap\n  // when the user clicks a movable cell\n  swap = (cellIndex) => {\n    let numbers = this.state.numbers;\n    let currentHole = this.state.holePosition;\n    // check if clicked cell next to blank cell\n    if (this.canMove(cellIndex)) {\n      let newNumbers = this.getNewLayout(numbers, cellIndex, currentHole);\n      // update the order of cells & the position of the blank\n      this.setState((state) => {\n        return { numbers: newNumbers, holePosition: cellIndex };\n      });\n    }\n    // check if solved\n    if (this.checkSolved(this.state.numbers, this.props.identifiers)) {\n      this.setState((state) => {\n        return { solved: true };\n      });\n    }\n  };\n\n  // safe swap, that only calls setState once, at the end of the swaparoo\n  shuffle = (counter = 0, cellArray = this.state.numbers) => {\n    // scooting this over from the original shuffle method\n    this.setState((state) => {\n      return { solved: false };\n    });\n    let offsets = [-4, 4, -1, 1];\n\n    // make copy of state.numbers\n    // to be able to manipulate it without affecting state\n    let currentHole = this.state.holePosition;\n    let safeArray = cellArray.slice(0);\n    let neighbour;\n\n    while (counter < 80) {\n      // get random direction to move hole to\n      let randomOffset = offsets[Math.floor(Math.random() * offsets.length)];\n      neighbour = currentHole + randomOffset;\n      // redefine the array\n      if (this.canMove(neighbour, currentHole)) {\n        safeArray = this.getNewLayout(safeArray, neighbour, currentHole);\n        currentHole = neighbour;\n        // increment counter\n        counter++;\n      }\n    }\n    // only update state ONCE\n    // after the fifty swaps\n    // eslint-disable-next-line\n    this.setState((state) => {\n      return { numbers: safeArray, holePosition: neighbour };\n    });\n    // (same as the original swap)\n    // check if solved\n    if (this.checkSolved(this.state.numbers, this.props.identifiers)) {\n      this.setState((state) => {\n        return { solved: true };\n      });\n    }\n  };\n\n  getBackgroundPos = (index, img) => {\n    // eslint-disable-next-line\n    let pos;\n    let coords = this.getCoords(index, this.props.rows, this.props.cols);\n    coords.row *= -1;\n    coords.col *= -1;\n    let xPos = (img.width / 4) * coords.row + \"px\";\n    let yPos = (img.height / 4) * coords.col + \"px\";\n    return (pos = xPos + \" \" + yPos);\n  };\n  // I'm not sure why this is necessary\n  // and couldn't be called at the end of a swap\n  static getDerivedStateFromProps(props, state) {\n    if (state.checkSolved(state.numbers, props.identifiers)) {\n      return { solved: true };\n    }\n    return null;\n  }\n  reRenderWhenSolved = () => {\n    //this.resetImage();\n    // wasn't using this moves array anyway\n    //let moves = new Array(50);\n    this.setState((state) => {\n      return { solved: false };\n    });\n    this.shuffle();\n  };\n\n  render() {\n    var img = new Image();\n    img.src = this.props.image;\n    //img.src = 'https://source.unsplash.com/random/400x400'\n    // img.src = \"https://i.pinimg.com/736x/09/e6/6d/09e66dd18f0488a30753b8c20d633b16--andy-warhol-visual-arts.jpg\";\n    img.width = 400;\n    img.height = 400;\n    var lyuk = new Image();\n    lyuk.src =\n      \"https://i.pinimg.com/736x/25/10/1f/25101f6abb216898babcb5498197f5cb.jpg\";\n    // conditional rendering\n    if (this.state.solved) {\n      let solvedStyle = {\n        position: \"absolute\",\n        width: \"50vw\",\n        left: \"25vw\",\n      };\n      return (\n        <div style={solvedStyle}>\n          <img\n            alt=\"yay\"\n            src=\"https://media.giphy.com/media/yoJC2GnSClbPOkV0eA/source.gif\"\n          />\n          <button\n            type=\"button\"\n            onClick={(e) => {\n              e.preventDefault();\n              this.reRenderWhenSolved(e);\n            }}\n          >\n            New game with same image\n          </button>\n          <button\n            type=\"button\"\n            onClick={(e) => {\n              e.preventDefault();\n              this.props.parentCallback();\n            }}\n          >\n            Get new image\n          </button>\n        </div>\n      );\n    }\n\n    let tableStyle = {\n      width: \"400px\",\n      height: \"400px\",\n      position: \"relative\",\n    };\n    return (\n      <div style={tableStyle}>\n        {this.state.numbers.map((number, index) => (\n          <Cell\n            rows={this.props.rows}\n            cols={this.props.cols}\n            img={number === this.props.hole ? lyuk : img}\n            backgroundPos={this.getBackgroundPos(number, img)}\n            index={this.props.identifiers[index]}\n            number={number}\n            key={this.props.identifiers[index]}\n            parentCallback={this.swap}\n            hole={this.props.hole}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Table;\n","import React from 'react';\n\nclass PuzzleOption extends React.Component {\n   /*\n   constructor(props) {\n      super(props);\n   }\n   */\n   render(){\n      return(\n         <img\n         src={this.props.src}\n         className={this.props.className}\n         onClick={(e)=>this.props.click(this.props.src)}\n         alt=\"please choose me\"/>\n      )\n   }\n}\n\nexport default PuzzleOption;","import React from \"react\";\n// eslint-disable-next-line\nimport axios from \"axios\";\n//import logo from './logo.svg';\nimport \"./App.css\";\n/* probably won't need the Cell component here\nimport Cell from './Cell.js';\n*/\nimport Table from \"./Table.js\";\nimport PuzzleOption from \"./PuzzleOption.js\";\n\nclass Tilitoli extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      image: \"https://source.unsplash.com/random/400x400\",\n      images: [],\n      ready: false,\n      gameOn: false,\n      //checkSolved: this.checkSolved.bind(this),\n      solved: false,\n    };\n  }\n\n  start = (imageFromPuzzleOptions) => {\n    this.setState((state) => {\n      return { gameOn: true, image: imageFromPuzzleOptions };\n    });\n  };\n\n  getSquareImagesFromFlickr = (q) => {\n    try {\n      return axios.get(q);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  setImages = () => {\n    this.setState((state) => {\n      return { gameOn: false, images: [], ready: false };\n    });\n    console.log(\"go\");\n    // the flickr group is https://www.flickr.com/groups/squareimg/\n    let group = \"17449586@N00\";\n    let imagesPerPage = 100;\n    let noOfImages = 6;\n    let randomIndices = [];\n    let query = `https://api.flickr.com/services/rest/?method=flickr.groups.pools.getPhotos&api_key=${process.env.REACT_APP_FLICKR_API_KEY}&group_id=${group}&extras=url_w&per_page=${imagesPerPage}&page=1&format=json&nojsoncallback=1`;\n\n    while (noOfImages > 0) {\n      randomIndices.push(Math.floor(Math.random() * imagesPerPage));\n      noOfImages -= 1;\n    }\n    // let randomIndex = Math.floor(Math.random() * imagesPerPage);\n    // eslint-disable-next-line\n    let images = this.getSquareImagesFromFlickr(query)\n      .then((response) => {\n        let images = randomIndices.map(\n          (randomIndex) => response.data.photos.photo[randomIndex].url_w\n        );\n        this.setState((state) => {\n          return { images: images, ready: true };\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  resizeImages = (pic) => {\n    // empty for now\n  };\n\n  componentDidMount() {\n    this.setImages();\n  }\n\n  render() {\n    // starting state for Table that gets overwritten\n    // at Table.componentDidMount\n    let numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 12, 13, 14, 11];\n    // the constant identifier for each cell\n    const identifiers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n    /*\n    let startButtonStyle = {\n      width: '50vw',\n      height: '50vh',\n      background: 'tomato',\n      textAlign: 'center',\n      verticalAlign: 'center',\n      lineHeight: '50vh',\n      color: 'white',\n      fontSize: '8vw',\n      cursor: 'pointer'\n    }\n    */\n    if (this.state.gameOn) {\n      return (\n        <div className=\"wrapper\">\n          <Table\n            rows={4}\n            cols={4}\n            numbers={numbers}\n            hole={15}\n            identifiers={identifiers}\n            image={this.state.image}\n            parentCallback={this.setImages}\n          />\n        </div>\n      );\n    }\n    if (this.state.ready) {\n      return (\n        <div className=\"imageOptionWrapper\">\n          <div className=\"top\">Dili-Toli!</div>\n          {this.state.images.map((image, index) => (\n            <PuzzleOption\n              key={index}\n              src={image}\n              className={`option${index}`}\n              click={this.start}\n            />\n          ))}\n          <div className=\"bottom\" onClick={(e) => this.setImages(e)}>\n            Get new images\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div className=\"wrapper\">\n        {/*\n        <div\n          style={ startButtonStyle }\n          onClick={this.start}>\n          Start game\n        </div>\n      */}\n        <img className=\"spinner\" alt=\"puzzle-shaped loading spinner\" />\n      </div>\n    );\n  }\n}\n\nexport default Tilitoli;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["Cell.js","Table.js","PuzzleOption.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","katt","parentCallback","index","getCoords","bind","rows","cols","col","Math","floor","row","coords","this","style","position","border","backgroundClip","backgroundRepeat","width","img","height","backgroundPosition","backgroundPos","backgroundImage","src","left","top","fontSize","number","hole","ref","innerRef","onClick","e","React","Component","Table","checkSolved","arr1","arr2","i","length","canMove","destination","diff","state","holePosition","abs","shuffle","setState","solved","shiftCounter","isShuffling","offsets","randomOffset","random","neighbour","swap","getNewLayout","numbers","fromIndex","toIndex","temp","slice","cellIndex","currentHole","newNumbers","identifiers","getBackgroundPos","reRenderWhenSolved","indexOf","image","Image","lyuk","alt","type","preventDefault","map","key","PuzzleOption","className","click","Tilitoli","start","imageFromPuzzleOptions","gameOn","getSquareImagesFromFlickr","q","axios","get","error","console","setImages","images","ready","log","noOfImages","randomIndices","query","process","REACT_APP_FLICKR_API_KEY","push","then","response","randomIndex","data","photos","photo","url_w","catch","resizeImages","pic","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.09aaba37.chunk.js","sourcesContent":["import React from 'react';\n\nclass Cell extends React.Component {\n    constructor(props) {\n      super(props);\n      this.getCoords = this.getCoords.bind(this);\n    }\n    getCoords(index, rows, cols) {\n        return {\n          col: Math.floor(index/cols),\n          row: index % cols\n        }\n      }\n    // swapping and keeping track of where the blank cell is\n    // with own method that calls parent's method, passing it data\n    katt = () => {\n      this.props.parentCallback(this.props.index);\n    }\n    render() {\n      let coords = this.getCoords(this.props.index, this.props.rows, this.props.cols);\n      let style = {\n        position: 'absolute',\n        border: \"1px solid white\",\n        backgroundClip: \"content-box\",\n        backgroundRepeat: \"no-repeat\",\n        width: this.props.img.width / 4,\n        height: this.props.img.height / 4,\n        backgroundPosition: this.props.backgroundPos,\n        backgroundImage: \"url(\" + this.props.img.src + \")\",\n        left: (this.props.img.width / 4) * coords.row,\n        top: (this.props.img.height / 4) * coords.col,\n        fontSize: \"8px\"\n      };\n      // eslint-disable-next-line\n      var hole = this.props.hole;\n      // eslint-disable-next-line\n      var rows = this.props.rows;\n      // eslint-disable-next-line\n      var cols = this.props.cols;\n      // eslint-disable-next-line\n      var index = this.props.index;\n      var number = this.props.number;\n      return (\n      <div\n        ref={this.props.innerRef}\n        style = { style }\n        onClick = {(e) => this.katt(e)}>\n          {(this.props.hole === number)?\"\":number+1}\n      </div>\n      )\n    }\n  };\n\n  export default Cell;","import React from 'react';\n//import axios from 'axios';\nimport Cell from './Cell.js';\n\nclass Table extends React.Component {\n    constructor(props) {\n      super(props);\n      // you need to duplicate the component scope\n      // to later be able to call a component method\n      // from within the state constructor\n      //const myself = this;\n      this.state = {\n        // the counter for the shuffle\n        shiftCounter: 0,\n        // check this when mounting and updating\n        // to do the shuffle\n        isShuffling: false,\n        checkSolved: this.checkSolved.bind(this),\n        solved: false,\n        numbers: this.props.numbers,\n        // this is what we'll rely on to track the blank cell around the grid\n        // trouble is, this \"numbers\" isn't \"this.state.numbers\",\n        // which I would need to be able to\n        // scramble cells from within the constructor\n        holePosition: this.props.numbers.indexOf(this.props.hole),\n        // setting up a starting image\n        image: 'https://unsplash.it/400/400'\n        //image: 'https://source.unsplash.com/random/400x400'\n      };\n    }\n  \n    /*\n    // calling the parent to get new image\n    resetImage = () => {\n      this.props.parentCallback();\n    }\n    */\n\n    checkSolved = (arr1, arr2) => {\n      for(let i = arr1.length; i--;) {\n          if(arr1[i] !== arr2[i])\n              return false;\n      }\n      return true;\n    }\n  \n    getCoords = (index, rows, cols) => {\n      return {\n        col: Math.floor(index/cols),\n        row: index % cols\n      }\n  }\n\n    canMove = (destination) => {\n      if(destination < 0 || destination >= 16) {\n        return false\n      }\n      let diff = this.state.holePosition - destination;\n      if(diff === -1) {\n        return destination % this.props.rows !== 0;\n      }\n      else if(diff === 1) {\n        return this.state.holePosition % this.props.rows !== 0;\n      }\n      else {\n        return Math.abs(diff) === this.props.rows;\n      }\n    }\n  \n    shuffle = () => {\n      this.setState((state) => {\n        return {solved: false}\n      })\n      if (this.state.shiftCounter >= 50) {\n        this.setState((state) => {\n          return {shiftCounter: 0, isShuffling: false }\n        });\n      }\n      else {\n        this.setState((state) => {\n          return {isShuffling: true}\n        });\n      }\n      this.setState((state) => {\n        return {shiftCounter: state.shiftCounter + 1}\n      })\n      let offsets = [-4, 4, -1, 1];\n      let randomOffset = offsets[Math.floor(Math.random()*offsets.length)];\n      let neighbour = this.state.holePosition + randomOffset;\n      this.swap(neighbour);\n    }\n  \n    componentDidUpdate() {\n      // call shuffle 50 consecutive times\n      if(this.state.isShuffling && this.state.shiftCounter <= 50) {\n        this.shuffle();\n      }\n    }\n  \n    componentDidMount() {\n      /*\n      // this doesn't work for some reason\n      if(this.state.isShuffling && this.state.shiftCounter <= 50) {\n        this.shuffle();\n      }\n      */\n      /*\n      axios.get(this.state.image)\n        .then(response => {\n          this.setState((state) => {\n            return {image: response}\n          })\n        })\n        */\n      this.shuffle();\n    }\n    getNewLayout = (numbers, fromIndex, toIndex) => {\n      numbers = numbers.slice(0);\n      let temp = numbers[toIndex];\n      numbers[toIndex] = numbers[fromIndex];\n      numbers[fromIndex] = temp;\n      return numbers;\n    }\n    swap = (cellIndex) => {\n      let numbers = this.state.numbers;\n      let currentHole = this.state.holePosition;\n      // check if clicked cell next to blank cell\n      if(this.canMove(cellIndex)) {\n        let newNumbers = this.getNewLayout(numbers, cellIndex, currentHole);\n        // update the order of cells & the position of the blank\n        this.setState((state) => {\n          return {numbers: newNumbers, holePosition: cellIndex}\n        });\n    }\n    // check if solved\n    if(this.checkSolved(this.state.numbers, this.props.identifiers)) {\n      this.setState((state) => {\n        return {solved: true}\n      })\n    }\n  }\n  \n    getBackgroundPos = (index, img) => {\n      // eslint-disable-next-line\n        let pos;\n        let coords = this.getCoords(index, this.props.rows, this.props.cols);\n        coords.row *= -1;\n        coords.col *= -1;\n        let xPos = img.width / 4 * coords.row + 'px';\n        let yPos = img.height / 4 * coords.col + 'px';\n        return pos = xPos + ' ' + yPos;\n        \n      }\n  // I'm not sure why this is necessary\n  // and couldn't be called at the end of a swap\n    static getDerivedStateFromProps(props, state) {\n      if(state.checkSolved(state.numbers, props.identifiers)) {\n        return {solved: true}\n      }\n      return null;\n    }\n    reRenderWhenSolved = () => {\n      //this.resetImage();\n      // wasn't using this moves array anyway\n      //let moves = new Array(50);\n      this.setState((state) => {\n        return {solved: false}\n      })\n      this.shuffle();\n    }\n  \n    render() {\n      var img = new Image();\n      img.src = this.props.image;\n      //img.src = 'https://source.unsplash.com/random/400x400'\n      // img.src = \"https://i.pinimg.com/736x/09/e6/6d/09e66dd18f0488a30753b8c20d633b16--andy-warhol-visual-arts.jpg\";\n      img.width = 400;\n      img.height = 400;\n      var lyuk = new Image();\n      lyuk.src = \"https://i.pinimg.com/736x/25/10/1f/25101f6abb216898babcb5498197f5cb.jpg\";\n      // conditional rendering\n      if(this.state.solved) {\n        let solvedStyle = {\n          position: 'absolute',\n          width: '50vw',\n          left: '25vw'\n        }\n        return (\n          <div\n            style={solvedStyle}>\n            <img\n              alt=\"yay\"\n              src=\"https://media.giphy.com/media/yoJC2GnSClbPOkV0eA/source.gif\"\n            />\n            <button\n              type=\"button\"\n              onClick={(e) => {\n                e.preventDefault();\n                this.reRenderWhenSolved(e)}\n                }>\n              New game with same image\n            </button>\n            <button\n              type=\"button\"\n              onClick={(e) => {\n                e.preventDefault();\n                this.props.parentCallback();\n              }}>\n              Get new image\n            </button>\n          </div>\n          )}\n      \n      let tableStyle = {\n        width: '400px',\n        height: '400px',\n        position: 'relative'\n      }\n      return (\n        <div style= { tableStyle }>\n          {this.state.numbers.map((number, index) => (\n            <Cell\n              rows = {this.props.rows}\n              cols = {this.props.cols}\n              img = {(number === this.props.hole) ? lyuk : img}\n              backgroundPos = {this.getBackgroundPos(number, img)}\n              index = {this.props.identifiers[index]}\n              number = {number}\n              key={this.props.identifiers[index]}\n              parentCallback = {this.swap}\n              hole = {this.props.hole}\n              />\n          ))}\n        </div >)\n    }\n  };\n\n  export default Table;","import React from 'react';\n\nclass PuzzleOption extends React.Component {\n   /*\n   constructor(props) {\n      super(props);\n   }\n   */\n   render(){\n      return(\n         <img\n         src={this.props.src}\n         className={this.props.className}\n         onClick={(e)=>this.props.click(this.props.src)}\n         alt=\"please choose me\"/>\n      )\n   }\n}\n\nexport default PuzzleOption;","import React from 'react';\n// eslint-disable-next-line\nimport axios from 'axios';\n//import logo from './logo.svg';\nimport './App.css';\n/* probably won't need the Cell component here\nimport Cell from './Cell.js';\n*/\nimport Table from './Table.js';\nimport PuzzleOption from './PuzzleOption.js';\n\nclass Tilitoli extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      image: 'https://source.unsplash.com/random/400x400',\n      images: [],\n      ready:false,\n      gameOn: false,\n      // moved the counter and isShuffling\n      // here from Table; Table methods need to be also (?)\n      shiftCounter: 0,\n      isShuffling: false,\n      //checkSolved: this.checkSolved.bind(this),\n      solved: false\n    }\n  }\n\nstart = (imageFromPuzzleOptions) => {\n  this.setState((state) => {\n    return {gameOn: true, image: imageFromPuzzleOptions}\n  })\n}\n\ngetSquareImagesFromFlickr = (q) => {\n  try {\n    return axios.get(q)\n  }\n  catch (error) {\n    console.error(error)\n  }\n}\n\nsetImages = () => {\n  this.setState((state) => {\n    return {gameOn: false, images: [], ready: false}\n  })\n  console.log(\"go\");\n  // the flickr group is https://www.flickr.com/groups/squareimg/\n  let group = \"17449586@N00\";\n  let imagesPerPage = 100;\n  let noOfImages = 6;\n  let randomIndices = [];\n  let query = `https://api.flickr.com/services/rest/?method=flickr.groups.pools.getPhotos&api_key=${process.env.REACT_APP_FLICKR_API_KEY}&group_id=${group}&extras=url_w&per_page=${imagesPerPage}&page=1&format=json&nojsoncallback=1`;\n\n  while(noOfImages >0) {\n    randomIndices.push(Math.floor(Math.random() * imagesPerPage));\n    noOfImages -= 1;\n  }\n  // let randomIndex = Math.floor(Math.random() * imagesPerPage);\n  // eslint-disable-next-line\n  let images = this.getSquareImagesFromFlickr(query)\n    .then(response => {\n      let images = randomIndices.map(randomIndex => \n        response.data.photos.photo[randomIndex].url_w);\n      this.setState((state) => {\n        return {images: images, ready: true}\n      })\n    })\n    .catch(error => {\n      console.log(error)\n    })\n\n}\n\nresizeImages = (pic) => {\n  // empty for now\n}\n\ncomponentDidMount() {\n  this.setImages();\n}\n\n  render() {\n    // starting state for Table that gets overwritten\n    // at Table.componentDidMount\n    let numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 12, 13, 14, 11];\n    // the constant identifier for each cell\n    const identifiers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n    /*\n    let startButtonStyle = {\n      width: '50vw',\n      height: '50vh',\n      background: 'tomato',\n      textAlign: 'center',\n      verticalAlign: 'center',\n      lineHeight: '50vh',\n      color: 'white',\n      fontSize: '8vw',\n      cursor: 'pointer'\n    }\n    */\n    if(this.state.gameOn) {\n      return(\n        <div className=\"wrapper\">\n          <Table\n            rows={4}\n            cols={4}\n            numbers={numbers}\n            hole={15}\n            identifiers = {identifiers}\n            image={this.state.image}\n            parentCallback = {this.setImages}/>\n        </div>\n      )\n    }\n    if(this.state.ready) {\n      return (\n        <div className=\"imageOptionWrapper\">\n          <div className=\"top\">\n            Dili-Toli!\n          </div>\n          {this.state.images.map((image, index) => (\n            <PuzzleOption\n              key={index}\n              src={image}\n              className={`option${index}`}\n              click={this.start}/>\n          ))}\n          <div className=\"bottom\"\n            onClick={(e) => this.setImages(e)}>\n              Get new images\n          </div>\n        </div>\n      )\n    }\n    return (\n      <div className=\"wrapper\">\n      {/*\n        <div\n          style={ startButtonStyle }\n          onClick={this.start}>\n          Start game\n        </div>\n      */}\n      <img className=\"spinner\" alt=\"puzzle-shaped loading spinner\"/>\n      </div>\n    )\n  }\n}\n\nexport default Tilitoli;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}